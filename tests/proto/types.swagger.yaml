swagger: "2.0"
info:
  title: types.proto
  version: version not set
tags:
  - name: TypesRPC
consumes:
  - application/json
produces:
  - application/json
paths:
  /types/complex:
    post:
      summary: rpc GoogleRPC(Google) returns (Google);
      operationId: TypesRPC_ComplexRPC
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/typesComplex'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/typesComplex'
      tags:
        - TypesRPC
  /types/enums:
    post:
      operationId: TypesRPC_EnumsRPC
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/typesEnums'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/typesEnums'
      tags:
        - TypesRPC
  /types/maps:
    post:
      operationId: TypesRPC_MapsRPC
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/typesMaps'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/typesMaps'
      tags:
        - TypesRPC
  /types/oneofs:
    post:
      operationId: TypesRPC_OneOfsRPC
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/typesOneOfs'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/typesOneOfs'
      tags:
        - TypesRPC
  /types/optional_enums:
    post:
      operationId: TypesRPC_OptionalEnumsRPC
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/typesOptionalEnums'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/typesOptionalEnums'
      tags:
        - TypesRPC
  /types/optional_scalars:
    post:
      operationId: TypesRPC_OptionalScalarsRPC
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/typesOptionalScalars'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/typesOptionalScalars'
      tags:
        - TypesRPC
  /types/repeated:
    post:
      operationId: TypesRPC_RepeatedRPC
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/typesRepeated'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/typesRepeated'
      tags:
        - TypesRPC
  /types/scalars:
    post:
      operationId: TypesRPC_ScalarsRPC
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/typesScalars'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/typesScalars'
      tags:
        - TypesRPC
definitions:
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON

      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
      message:
        type: string
  typesComplex:
    type: object
    properties:
      enums:
        $ref: '#/definitions/typesEnums'
      maps:
        $ref: '#/definitions/typesMaps'
      oneofs:
        $ref: '#/definitions/typesOneOfs'
      repeated:
        $ref: '#/definitions/typesRepeated'
      scalars:
        $ref: '#/definitions/typesScalars'
  typesEnums:
    type: object
    properties:
      values:
        $ref: '#/definitions/typesValues'
  typesMaps:
    type: object
    properties:
      foo:
        type: object
        additionalProperties:
          type: integer
          format: int32
  typesOneOfs:
    type: object
    properties:
      bar:
        type: string
        format: byte
      baz:
        type: string
        format: int64
      foo:
        type: string
  typesOptionalEnums:
    type: object
    properties:
      values:
        $ref: '#/definitions/typesValues'
  typesOptionalScalars:
    type: object
    properties:
      a:
        type: number
        format: double
      b:
        type: string
        format: int64
      c:
        type: string
      d:
        type: string
        format: byte
      e:
        type: boolean
  typesRepeated:
    type: object
    properties:
      foo:
        type: array
        items:
          type: string
  typesScalars:
    type: object
    properties:
      a:
        type: number
        format: double
      b:
        type: string
        format: int64
      c:
        type: string
      d:
        type: string
        format: byte
      e:
        type: boolean
  typesValues:
    type: string
    enum:
      - FOO
      - BAR
    default: FOO
